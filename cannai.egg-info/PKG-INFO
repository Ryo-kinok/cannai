Metadata-Version: 2.1
Name: cannai
Version: 0.4.47
Summary: data visualization for machine learning
Home-page: UNKNOWN
Author: Ryo Kinoshita
Author-email: Rkinoshi55@gmail.com
License: MIT
Description: # **Cannai**
        日本語での説明はreadme_JP.mdにあります
        
        ## **Overview**
        This library make many graphs, for comparing trained machine-learning models.
        We assume for using this in google colab.
        
        ## **Description**
        This library saves trained model, and you can get output when you want to.
        There is three steps: making manegement library, saving trained model, print graphs.
        Either of step can be solved in one code.
        
        ## **How to use**
        
        You can install this library by using:
        
        ```python
        !pip install cannai
        ```
        
        
        If you are using colab, other library, used in this library, will be installed automatically.
        
        **making management library**
        
        ```python
        import cannai
        Cnai = cannai.Cmodel(base_dir,binary_class = True)
        ```
        
        Make management library from imported library.
        
        When making library, you can set save directory (saving models and data),
        and set this library uses binary_classification models(by binary_class).
        
        
        ```python
        Cnai.set_input(test_df)
        Cnai.set_answer(test_df_ans)
        ```
        
        Set the test data into management library,
        use "set_input" for setting explanation variable,
        and use "set_answer" for objective variable.
        Argument must be dataframe or series.
        
        **saving trained model**
        
        ```python
        xgbst = xgb.train(xgb_params,dtrain,)
        Cnai.add_model(xgbst,"xgb")
        ```
        
        You can add trained model into library by using "add_model".
        This example means training xgboost model and setting into library.
        This model named "xgb", because model name:"xgb" is inputted with model.
        (If you have not inputted model name, name will be set automatically.)
        
        **print graphs**
        
        ```python
        from cannai.model_compare.multiclass import multiclass_bar
        multiclass_bar(Cnai,[1,2,3] ,0,["binary_accuracy","binary_cross_entropy"])
        ```
        
        When you want to show graph, call each function using cannai.model_compare,
        Set management library when calling function.
        
        This example means calling "multiclass_bar" function.
        
        ## **Functions**
        
        ### **multiclass:**
        
        word:　
        
          model id: each model has id 0,1,2,3,... 
          model name: The name you set in "saving trained model"
        
        **multiclass_bar:**
        
        <img width="414" alt="multiclass_bar" src="https://user-images.githubusercontent.com/81252378/114963734-57d1e580-9ea8-11eb-901d-e3cab5e10f71.PNG">
        
        ```python
        multiclass_bar(C_mod, key_list ,target_line, explanatory_line_list)
        ```
        
        Show multiple performance index with bar-graph
        
        arguments:
        　1st:management library　
        　2nd:list of model id(int) or model name(str)
        　3rd:label(str) or line-id(int) of objective variable
        　4th:performance index
        　
        **multiclass_scatter:**
        
        <img width="415" alt="multiclass_scatter" src="https://user-images.githubusercontent.com/81252378/114963739-59031280-9ea8-11eb-81c9-fcb6224b02b0.PNG">
        
        ```python
        multiclass_scatter(C_mod, key_list ,0, ['LotArea', 'OverallQual'])
        ```
        
        For each explanation variable, show scatter plot with objective variable.
        
        arguments:
        　1st:management library　
        　2nd:list of model id(int) or model name(str)
        　3rd:label(str) or line-id(int) of objective variable
        　4th:label(str) or line-id(int) of explanation variable
        
        **multiclass_matrix:**
        
        <img width="424" alt="multiclass_matrix" src="https://user-images.githubusercontent.com/81252378/114963736-586a7c00-9ea8-11eb-8505-b91d7b023c69.PNG">
        
        ```python
        multiclass_matrix(C_mod, key_list )
        ```
        
        Show matrix graph of objective variable and explanation variable
        
        arguments:
        　1st:management library　
        　2nd:list of model id(int) or model name(str)
        
        **multiclass_rank:**
        
        <img width="393" alt="multiclass_rank" src="https://user-images.githubusercontent.com/81252378/114963738-59031280-9ea8-11eb-9e43-98dd379d94b8.PNG">
        
        ```python
        multiclass_rank(C_mod, key_list, target_line ,score_type = "abs", comvert="default", show_range="top50")
        ```
        
        Show sorted bar graph of error score. 
        
        arguments:
        　1st:management library　
        　2nd:list of model id(int) or model name(str)
        　3rd:label(str) or line-id(int) of objective variable
        　score_type:type of score : "abs" is absolute of absolute error, "rel"  is absolute of relative error
        　comvert: if you input "log", graph will be logarithmic graph. 
        　show_range:  "topX" shows top X datas, "botX" shows bottom X datas.
        　
        
        
        ## **Notice**
        Variation of graph will be added in near future.
        (Please give me any advise)
Keywords: machinelearning visualization graph
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3.9
Classifier: Framework :: Matplotlib
Description-Content-Type: text/markdown
